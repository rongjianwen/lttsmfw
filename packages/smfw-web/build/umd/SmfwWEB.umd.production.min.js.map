{"version":3,"file":"SmfwWEB.umd.production.min.js","sources":["../../src/DS/ElementNode/index.tsx","../../src/utils/menuFindExt.ts","../../src/utils/menuForeach.ts","../../src/utils/updateMenu.ts","../../src/utils/StyledComponent.tsx","../../src/components/Panel.tsx","../../src/components/NestedListItem.tsx","../../src/components/NestedList.tsx","../../src/components/PopoverList.tsx","../../src/slices/navMenu.ts","../../src/views/classic/index.tsx","../../src/layouts/classic/basic.tsx","../../src/slices/sidebar.ts","../../src/layouts/classic/common.tsx","../../src/slices/extraMenu.ts","../../src/templates/classic/notFound.tsx","../../src/templates/classic/login.tsx","../../src/slices/sideMenu.ts","../../src/templates/classic/manager.tsx","../../src/themes/classic/index.ts","../../src/slices/copyright.ts","../../src/slices/logo.ts","../../src/Engine/index.tsx","../../src/utils/HtmlTag.tsx","../../src/reducer/index.ts","../../src/store/index.ts"],"sourcesContent":["import React from 'react';\r\nimport _ from 'lodash';\r\nimport * as ElementNodeTypes from './types';\r\n\r\nclass ElementNode {\r\n    id: string;\r\n    props: { [key: string]: any };\r\n    element: any;\r\n    children: ElementNode[];\r\n\r\n    static replace(element: ElementNodeTypes.LoadOptions, map?: ElementNodeTypes.ReplaceOptions, depth = 0) {\r\n        if (_.isEmpty(map)) {\r\n            return element;\r\n        }\r\n\r\n        if (!_.isEmpty(element.children)) {\r\n            _.forEach(element.children, (item: ElementNodeTypes.LoadOptions, _i: number) => {\r\n                ElementNode.replace(item, map, depth + 1);\r\n            });\r\n        }\r\n\r\n        _.forEach(map, (item: any, id: string) => {\r\n            if (id === 'root' && depth === 0) {\r\n                _.merge(element, item);\r\n            }\r\n\r\n            if (element.id === id) {\r\n                _.merge(element, item);\r\n            }\r\n        });\r\n        return element;\r\n    }\r\n\r\n    constructor() {\r\n        this.id = '';\r\n        this.children = [];\r\n        this.props = {};\r\n        this.element = null;\r\n    }\r\n\r\n    load(options: ElementNodeTypes.LoadOptions) {\r\n        this.id = options.id ? options.id : new Date().getTime().toString();\r\n        this.props = options.props ? options.props : {};\r\n        this.element = options.element ? options.element : null;\r\n        const children = options.children ? options.children : [];\r\n\r\n        this.children = children.map((item: any, _i: number) => {\r\n            const node = new ElementNode();\r\n            node.load(item);\r\n            return node;\r\n        });\r\n    }\r\n\r\n    toComponent(props: any = {}) {\r\n        const elprops = _.merge(this.props, props, { attrs: { _id: this.id } });\r\n\r\n        const El = this.element;\r\n        if (typeof El === 'function') {\r\n            return (\r\n                <El {...elprops}>{this.children?.map((subnode: any, i: number) => subnode.toComponent({ key: i }))}</El>\r\n            );\r\n        }\r\n\r\n        return El;\r\n    }\r\n}\r\n\r\nexport * as ElementNodeTypes from './types';\r\nexport default ElementNode;\r\n","import _ from 'lodash';\r\n\r\nfunction menuFindExt(menu: any, find: any, process: any, pmenu: any = null, index: any = null) {\r\n    if (!_.isEmpty(menu.children)) {\r\n        _.forEach(menu.children, (v: any, i: number) => {\r\n            menuFindExt(v, find, process, menu, i);\r\n        });\r\n    }\r\n    if (find(menu)) {\r\n        process(menu, pmenu, index);\r\n    }\r\n}\r\n\r\nexport default menuFindExt;\r\n","import _ from 'lodash';\r\n\r\nfunction menuForeach(menu: any, process: any, pmenu: any = null, index: any = null) {\r\n    if (!_.isEmpty(menu.children)) {\r\n        _.forEach(menu.children, (v: any, i: number) => {\r\n            menuForeach(v, process, menu, i);\r\n        });\r\n    }\r\n    process(menu, pmenu, index);\r\n}\r\n\r\nexport default menuForeach;\r\n","import _ from 'lodash';\r\nimport menuFindExt from './menuFindExt';\r\n\r\nfunction updateMenu(state: any, key: string, id: string, menu: any) {\r\n    let mm = _.cloneDeep(state[key]);\r\n    menuFindExt(\r\n        mm,\r\n        (m: any) => m.id === id,\r\n        (m: any, pm: any, i: any) => {\r\n            if (pm) {\r\n                pm.children[i] = menu;\r\n            } else {\r\n                mm = menu;\r\n            }\r\n        }\r\n    );\r\n    state[key] = mm;\r\n}\r\n\r\nexport default updateMenu;\r\n","import { styled } from '@material-ui/core';\r\n\r\nfunction StyledComponent(component: any, makeStyles: any, options: any = {}) {\r\n    return styled(component)((params: any) => {\r\n        const { theme } = params;\r\n        return makeStyles(theme);\r\n    }, options);\r\n}\r\n\r\nexport default StyledComponent;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nexport interface PanelProps {\r\n    styledElement?: any;\r\n    attrs?: any;\r\n    children?: any;\r\n    defaultContent?: any;\r\n}\r\n\r\nfunction Panel(props: PanelProps) {\r\n    const El = props.styledElement ? props.styledElement : 'div';\r\n    return <El {...props.attrs}>{!_.isEmpty(props.children) ? props.children : props.defaultContent}</El>;\r\n}\r\n\r\nexport default Panel;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { List, ListItem, ListItemText, Icon, Collapse, makeStyles } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    nested: {\r\n        paddingLeft: theme.spacing(2)\r\n    }\r\n}));\r\n\r\nexport interface NestedListItemProps {\r\n    menu: any;\r\n    open: boolean;\r\n    nested: boolean;\r\n    depth: number;\r\n    onClick: any;\r\n}\r\n\r\nfunction NestedListItem(props: NestedListItemProps) {\r\n    const { menu, open, nested, depth, onClick } = props;\r\n    const classes = useStyles();\r\n    const className = (classes as any).nested;\r\n    const attrs: any = {};\r\n    if (typeof nested !== 'undefined') {\r\n        attrs.className = className;\r\n    }\r\n    return (\r\n        <div {...attrs}>\r\n            <ListItem button onClick={() => onClick(menu)}>\r\n                <ListItemText primary={menu.label} />\r\n                {!_.isEmpty(menu.children) && (open ? <Icon>expand_less</Icon> : <Icon>expand_more</Icon>)}\r\n            </ListItem>\r\n            {!_.isEmpty(menu.children) && (\r\n                <Collapse in={open} timeout='auto' unmountOnExit>\r\n                    <List component='div' disablePadding>\r\n                        {menu.children.map((v: any, _i: number) => (\r\n                            <NestedListItem\r\n                                onClick={onClick}\r\n                                key={v.id}\r\n                                menu={v}\r\n                                open={v.open}\r\n                                nested\r\n                                depth={depth + 1}\r\n                            />\r\n                        ))}\r\n                    </List>\r\n                </Collapse>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NestedListItem;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { List } from '@material-ui/core';\r\n\r\nimport NestedListItem from './NestedListItem';\r\nimport menuForeach from '../utils/menuForeach';\r\n\r\nexport interface NestedListProps {\r\n    menu: any;\r\n    updateMenu: any;\r\n}\r\n\r\nfunction NestedList(props: NestedListProps) {\r\n    const { menu, updateMenu } = props;\r\n\r\n    function handleClick(cm: any) {\r\n        if (typeof cm.onClick === 'function') {\r\n            cm.onClick(cm);\r\n        }\r\n\r\n        const open = !cm.open;\r\n        const mm = _.cloneDeep(cm);\r\n        menuForeach(mm, (m: any, _pmenu: any, _i: any) => {\r\n            if (typeof m.open !== 'undefined') {\r\n                m.open = false;\r\n            }\r\n        });\r\n        updateMenu(mm.id, { ...mm, open });\r\n    }\r\n\r\n    return (\r\n        <List component='nav' aria-labelledby='nested-list-subheader'>\r\n            {menu.children.map((v: any, _i: number) => (\r\n                <NestedListItem onClick={handleClick} key={v.id} menu={v} open={v.open} nested depth={0} />\r\n            ))}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default NestedList;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { Button, Popover, Icon } from '@material-ui/core';\r\nimport NestedList from './NestedList';\r\nimport menuForeach from '../utils/menuForeach';\r\n\r\nexport interface PopoverListProps {\r\n    menu: any;\r\n    updateMenu: any;\r\n    classes: any;\r\n}\r\n\r\nfunction PopoverList(props: PopoverListProps) {\r\n    const { menu, updateMenu, classes } = props;\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n    const { open } = menu;\r\n    const id = open ? menu.id : undefined;\r\n\r\n    const handleClick = (e: any) => {\r\n        setAnchorEl(e.currentTarget);\r\n        updateMenu(menu.id, { ...menu, open: !menu.open });\r\n    };\r\n\r\n    const handleClose = () => {\r\n        const mm = _.cloneDeep(menu);\r\n        menuForeach(mm, (m: any, _pmenu: any, _i: any) => {\r\n            if (typeof m.open !== 'undefined') {\r\n                m.open = false;\r\n            }\r\n        });\r\n        updateMenu(mm.id, mm);\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button aria-describedby={id} onClick={(e: any) => handleClick(e)} classes={{ label: classes.buttonLabel }}>\r\n                {menu.label}\r\n                {menu.icon && <Icon>{menu.icon}</Icon>}\r\n                {!_.isEmpty(menu.children) &&\r\n                    !_.isEmpty(menu.label) &&\r\n                    (open ? <Icon>expand_less</Icon> : <Icon>expand_more</Icon>)}\r\n            </Button>\r\n            {!_.isEmpty(menu.children) && (\r\n                <Popover\r\n                    id={id}\r\n                    open={open}\r\n                    anchorEl={anchorEl}\r\n                    onClose={handleClose}\r\n                    classes={{ paper: classes.popoverPaper }}\r\n                >\r\n                    <NestedList menu={menu} updateMenu={updateMenu} />\r\n                </Popover>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PopoverList;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport _ from 'lodash';\r\nimport updateMenu from '../utils/updateMenu';\r\n\r\nconst defaultMenu = {\r\n    id: 'root',\r\n    icon: 'more_horiz',\r\n    label: '',\r\n    open: false,\r\n    children: []\r\n};\r\n\r\nexport interface NavMenuState {\r\n    menu: any;\r\n    mobileMenu: any;\r\n}\r\n\r\nconst initialState: NavMenuState = {\r\n    menu: defaultMenu,\r\n    mobileMenu: _.cloneDeep(defaultMenu)\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'navMenu',\r\n    initialState,\r\n    reducers: {\r\n        updateMenu: (state, action: PayloadAction<any>) => {\r\n            const { id, menu } = action.payload;\r\n            updateMenu(state, 'menu', id, menu);\r\n        },\r\n        updateMobileMenu: (state, action: PayloadAction<any>) => {\r\n            const { id, menu } = action.payload;\r\n            updateMenu(state, 'mobileMenu', id, menu);\r\n        }\r\n    }\r\n});\r\n\r\nexport default slice;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport StyledComponent from '../../utils/StyledComponent';\r\nimport Panel from '../../components/Panel';\r\nimport navMenuSlice from '../../slices/navMenu';\r\nimport PopoverList from '../../components/PopoverList';\r\n\r\nexport const mNavMenuBar = {\r\n    id: 'm-navMenuBar',\r\n    props: {\r\n        styledElement: StyledComponent('div', (theme: any) => ({\r\n            marginLeft: theme.globals.padding,\r\n            display: 'none',\r\n            [theme.breakpoints.down('xs')]: {\r\n                display: 'flex'\r\n            }\r\n        })),\r\n        defaultContent: 'm-navMenuBar'\r\n    },\r\n    element: Panel,\r\n    children: [\r\n        {\r\n            id: 'm-navMenu',\r\n            props: {\r\n                styledElement: StyledComponent('div', (theme: any) => ({\r\n                    backgroundColor: theme.navMenu.backgroundColor\r\n                })),\r\n                defaultContent: 'm-navMenu'\r\n            },\r\n            element: (_props: any) => {\r\n                const useStyle = makeStyles((theme: any) => ({\r\n                    popoverPaper: {\r\n                        width: theme.navbarPopoverPaper.width\r\n                    },\r\n                    buttonLabel: {\r\n                        color: theme.navbar.color\r\n                    }\r\n                }));\r\n                const classes = useStyle();\r\n\r\n                const menu = useSelector((state: any) => state.navMenu.mobileMenu);\r\n                const dispatch = useDispatch();\r\n                const updateMenu = (id: string, newMenu: any) => {\r\n                    dispatch(navMenuSlice.actions.updateMobileMenu({ id, menu: newMenu }));\r\n                };\r\n                return <PopoverList menu={menu} updateMenu={updateMenu} classes={classes} />;\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nexport const navMenuBar = {\r\n    id: 'navMenuBar',\r\n    props: {\r\n        styledElement: StyledComponent('div', (theme: any) => ({\r\n            marginLeft: theme.globals.padding,\r\n            [theme.breakpoints.down('xs')]: {\r\n                display: 'none'\r\n            }\r\n        })),\r\n        defaultContent: 'm-navMenuBar'\r\n    },\r\n    element: Panel,\r\n    children: [\r\n        {\r\n            id: 'navMenu',\r\n            props: {\r\n                styledElement: StyledComponent('div', (theme: any) => ({\r\n                    backgroundColor: theme.navMenu.backgroundColor\r\n                })),\r\n                defaultContent: 'navMenu'\r\n            },\r\n            element: (_props: any) => {\r\n                const useStyle = makeStyles((theme: any) => ({\r\n                    popoverPaper: {\r\n                        width: theme.navbarPopoverPaper.width\r\n                    },\r\n                    buttonLabel: {\r\n                        color: theme.navbar.color\r\n                    }\r\n                }));\r\n                const classes = useStyle();\r\n\r\n                const menu = useSelector((state: any) => state.navMenu.menu);\r\n                const dispatch = useDispatch();\r\n                const updateMenu = (id: string, newMenu: any) => {\r\n                    dispatch(navMenuSlice.actions.updateMenu({ id, menu: newMenu }));\r\n                };\r\n                if (!_.isEmpty(menu.children)) {\r\n                    return menu.children.map((v: any, _i: number) => (\r\n                        <PopoverList key={v.id} menu={v} updateMenu={updateMenu} classes={classes} />\r\n                    ));\r\n                }\r\n                return null;\r\n            }\r\n        }\r\n    ]\r\n};\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { useSelector } from 'react-redux';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport Panel from '../../components/Panel';\r\nimport StyledComponent from '../../utils/StyledComponent';\r\n\r\nconst layout = {\r\n    id: 'root',\r\n    props: {\r\n        styledElement: StyledComponent('div', (theme: any) => ({\r\n            flex: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            fontFamily: theme.globals.fontFamily\r\n        })),\r\n        defaultContent: 'root'\r\n    },\r\n    element: Panel,\r\n    children: [\r\n        {\r\n            id: 'header',\r\n            props: {\r\n                styledElement: StyledComponent('div', (theme: any) => ({\r\n                    display: 'flex',\r\n                    height: theme.header.height,\r\n                    backgroundColor: theme.header.backgroundColor,\r\n                    color: theme.header.color\r\n                })),\r\n                defaultContent: 'header'\r\n            },\r\n            element: Panel,\r\n            children: [\r\n                {\r\n                    id: 'logobar',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (theme: any) => ({\r\n                            width: `calc(${theme.logobar.width} - ${theme.globals.padding}*2)`,\r\n                            padding: theme.globals.padding,\r\n                            fontSize: theme.globals.fontSize,\r\n                            display: 'flex',\r\n                            alignItems: 'center'\r\n                        })),\r\n                        defaultContent: 'logobar'\r\n                    },\r\n                    element: Panel,\r\n                    children: [\r\n                        {\r\n                            id: 'logo',\r\n                            props: {\r\n                                styledElement: StyledComponent(Button, (theme: any) => ({\r\n                                    color: (theme as any).header.color,\r\n                                    fontSize: (theme as any).logobar.fontSize,\r\n                                    justifyContent: 'flex-start',\r\n                                    flex: 1,\r\n                                    '&:hover': {\r\n                                        backgroundColor: theme.header.backgroundColor\r\n                                    }\r\n                                }))\r\n                            },\r\n                            element: (props: any) => {\r\n                                const text = useSelector((state: any) => state.logo.text);\r\n                                const El = props.styledElement ? props.styledElement : Button;\r\n\r\n                                return (\r\n                                    <El {...props.attrs} disableRipple>\r\n                                        {text}\r\n                                    </El>\r\n                                );\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    id: 'navbar',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (theme: any) => ({\r\n                            flex: 1,\r\n                            backgroundColor: theme.navbar.backgroundColor,\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center'\r\n                        })),\r\n                        defaultContent: 'navbar'\r\n                    },\r\n                    element: Panel\r\n                },\r\n                {\r\n                    id: 'extrabar',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (theme: any) => ({\r\n                            backgroundColor: theme.extrabar.backgroundColor,\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center'\r\n                        })),\r\n                        defaultContent: ''\r\n                    },\r\n                    element: Panel\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 'content',\r\n            props: {\r\n                styledElement: StyledComponent('div', (theme: any) => ({\r\n                    flex: 1,\r\n                    display: 'flex',\r\n                    [theme.breakpoints.down('xs')]: {\r\n                        flexDirection: 'column'\r\n                    }\r\n                })),\r\n                defaultContent: 'content'\r\n            },\r\n            element: Panel,\r\n            children: [\r\n                {\r\n                    id: 'workspace',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (_theme: any) => ({\r\n                            flex: 1,\r\n                            display: 'flex',\r\n                            flexDirection: 'column'\r\n                        })),\r\n                        defaultContent: 'workspace'\r\n                    },\r\n                    element: Panel,\r\n                    children: [\r\n                        {\r\n                            id: 'main',\r\n                            props: {\r\n                                styledElement: StyledComponent('div', (_theme: any) => ({\r\n                                    flex: 1,\r\n                                    display: 'flex'\r\n                                })),\r\n                                defaultContent: 'main'\r\n                            },\r\n                            element: Panel\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 'footer',\r\n            props: {\r\n                styledElement: StyledComponent('div', (theme: any) => ({\r\n                    padding: theme.globals.padding,\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    backgroundColor: theme.footer.backgroundColor,\r\n                    color: theme.footer.color,\r\n                    fontSize: theme.footer.fontSize\r\n                })),\r\n                defaultContent: 'footer'\r\n            },\r\n            element: Panel\r\n        }\r\n    ]\r\n};\r\n\r\nexport default layout;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport interface SidebarState {\r\n    open: boolean;\r\n}\r\n\r\nconst initialState: SidebarState = {\r\n    open: true\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'sidebar',\r\n    initialState,\r\n    reducers: {\r\n        toggle: (state) => {\r\n            state.open = !state.open;\r\n        }\r\n    }\r\n});\r\n\r\nexport default slice;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { IconButton, Icon, Button } from '@material-ui/core';\r\n\r\nimport Panel from '../../components/Panel';\r\nimport StyledComponent from '../../utils/StyledComponent';\r\nimport sidebarSlice from '../../slices/sidebar';\r\n\r\nconst layout = {\r\n    id: 'root',\r\n    props: {\r\n        styledElement: StyledComponent('div', (theme: any) => ({\r\n            flex: 1,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            fontFamily: theme.globals.fontFamily\r\n        })),\r\n        defaultContent: 'root'\r\n    },\r\n    element: Panel,\r\n    children: [\r\n        {\r\n            id: 'header',\r\n            props: {\r\n                styledElement: StyledComponent('div', (theme: any) => ({\r\n                    display: 'flex',\r\n                    height: theme.header.height,\r\n                    backgroundColor: theme.header.backgroundColor,\r\n                    color: theme.header.color\r\n                })),\r\n                defaultContent: 'header'\r\n            },\r\n            element: Panel,\r\n            children: [\r\n                {\r\n                    id: 'logobar',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (theme: any) => ({\r\n                            width: `calc(${theme.logobar.width} - ${theme.globals.padding}*2)`,\r\n                            padding: theme.globals.padding,\r\n                            fontSize: theme.globals.fontSize,\r\n                            display: 'flex',\r\n                            alignItems: 'center'\r\n                        })),\r\n                        defaultContent: 'logobar'\r\n                    },\r\n                    element: Panel,\r\n                    children: [\r\n                        {\r\n                            id: 'sidebarIcon',\r\n                            props: {\r\n                                styledIcon: StyledComponent(Icon, (theme: any) => ({\r\n                                    color: (theme as any).header.color\r\n                                }))\r\n                            },\r\n                            element: (props: any) => {\r\n                                const StyledIcon = props.styledIcon ? props.styledIcon : Icon;\r\n                                const dispatch = useDispatch();\r\n\r\n                                function handleClick() {\r\n                                    dispatch(sidebarSlice.actions.toggle());\r\n                                }\r\n\r\n                                return (\r\n                                    <IconButton {...props.attrs} onClick={handleClick}>\r\n                                        <StyledIcon>menu</StyledIcon>\r\n                                    </IconButton>\r\n                                );\r\n                            }\r\n                        },\r\n                        {\r\n                            id: 'logo',\r\n                            props: {\r\n                                styledElement: StyledComponent(Button, (theme: any) => ({\r\n                                    color: (theme as any).header.color,\r\n                                    fontSize: (theme as any).logobar.fontSize,\r\n                                    justifyContent: 'flex-start',\r\n                                    flex: 1,\r\n                                    '&:hover': {\r\n                                        backgroundColor: theme.header.backgroundColor\r\n                                    }\r\n                                }))\r\n                            },\r\n                            element: (props: any) => {\r\n                                const text = useSelector((state: any) => state.logo.text);\r\n                                const El = props.styledElement ? props.styledElement : Button;\r\n\r\n                                const disableRipple = true;\r\n                                return (\r\n                                    <El {...props.attrs} disableRipple={disableRipple}>\r\n                                        {text}\r\n                                    </El>\r\n                                );\r\n                            }\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    id: 'navbar',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (theme: any) => ({\r\n                            flex: 1,\r\n                            backgroundColor: theme.navbar.backgroundColor,\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center'\r\n                        })),\r\n                        defaultContent: 'navbar'\r\n                    },\r\n                    element: Panel\r\n                },\r\n                {\r\n                    id: 'extrabar',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (theme: any) => ({\r\n                            backgroundColor: theme.extrabar.backgroundColor,\r\n                            display: 'flex',\r\n                            flexDirection: 'row',\r\n                            alignItems: 'center'\r\n                        })),\r\n                        defaultContent: ''\r\n                    },\r\n                    element: Panel\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 'content',\r\n            props: {\r\n                styledElement: StyledComponent('div', (theme: any) => ({\r\n                    flex: 1,\r\n                    display: 'flex',\r\n                    [theme.breakpoints.down('xs')]: {\r\n                        flexDirection: 'column'\r\n                    }\r\n                })),\r\n                defaultContent: 'content'\r\n            },\r\n            element: Panel,\r\n            children: [\r\n                {\r\n                    id: 'sidebar',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (theme: any) => ({\r\n                            width: theme.sidebar.width,\r\n                            backgroundColor: theme.sidebar.backgroundColor,\r\n                            color: theme.sidebar.color,\r\n                            [theme.breakpoints.down('xs')]: {\r\n                                width: '100%',\r\n                                height: `calc(100% - ${theme.header.height})`,\r\n                                position: 'absolute',\r\n                                backgroundColor: theme.header.backgroundColor\r\n                            }\r\n                        })),\r\n                        defaultContent: 'sidebar'\r\n                    },\r\n                    element: (props: any) => {\r\n                        const open = useSelector((state: any) => state.sidebar.open);\r\n                        return open && <Panel {...props} />;\r\n                    }\r\n                },\r\n                {\r\n                    id: 'workspace',\r\n                    props: {\r\n                        styledElement: StyledComponent('div', (_theme: any) => ({\r\n                            flex: 1,\r\n                            display: 'flex',\r\n                            flexDirection: 'column'\r\n                        })),\r\n                        defaultContent: 'workspace'\r\n                    },\r\n                    element: Panel,\r\n                    children: [\r\n                        {\r\n                            id: 'main',\r\n                            props: {\r\n                                styledElement: StyledComponent('div', (theme: any) => ({\r\n                                    flex: 1,\r\n                                    padding: theme.globals.padding\r\n                                })),\r\n                                defaultContent: 'main'\r\n                            },\r\n                            element: Panel\r\n                        },\r\n                        {\r\n                            id: 'footer',\r\n                            props: {\r\n                                styledElement: StyledComponent('div', (theme: any) => ({\r\n                                    padding: theme.globals.padding,\r\n                                    display: 'flex',\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    backgroundColor: theme.footer.backgroundColor,\r\n                                    color: theme.footer.color,\r\n                                    fontSize: theme.footer.fontSize\r\n                                })),\r\n                                defaultContent: 'footer'\r\n                            },\r\n                            element: Panel\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nexport default layout;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport _ from 'lodash';\r\nimport updateMenu from '../utils/updateMenu';\r\n\r\nconst defaultMenu = {\r\n    id: 'root',\r\n    icon: 'settings',\r\n    label: '',\r\n    open: false,\r\n    children: []\r\n};\r\n\r\nexport interface ExtraMenuState {\r\n    menu: any;\r\n}\r\n\r\nconst initialState: ExtraMenuState = {\r\n    menu: defaultMenu\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'extraMenu',\r\n    initialState,\r\n    reducers: {\r\n        updateMenu: (state, action: PayloadAction<any>) => {\r\n            const { id, menu } = action.payload;\r\n            updateMenu(state, 'menu', id, menu);\r\n        }\r\n    }\r\n});\r\n\r\nexport default slice;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Panel from '../../components/Panel';\r\nimport PopoverList from '../../components/PopoverList';\r\nimport StyledComponent from '../../utils/StyledComponent';\r\nimport extraMenuSlice from '../../slices/extraMenu';\r\n\r\nimport * as classicViews from '../../views/classic';\r\n\r\nconst template = {\r\n    __layout: 'basic',\r\n    logo: {\r\n        children: [\r\n            {\r\n                id: 'logoText',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        marginLeft: theme.globals.padding\r\n                    })),\r\n                    defaultContent: (_props: any) => {\r\n                        const text = useSelector((state: any) => state.logo.text);\r\n                        return <React.Fragment key={1}>{text}</React.Fragment>;\r\n                    }\r\n                },\r\n                element: Panel\r\n            }\r\n        ]\r\n    },\r\n    navbar: {\r\n        children: [classicViews.mNavMenuBar, classicViews.navMenuBar]\r\n    },\r\n    extrabar: {\r\n        children: [\r\n            {\r\n                id: 'extraMenu',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        backgroundColor: theme.extrabar.backgroundColor\r\n                    })),\r\n                    defaultContent: 'extraMenu'\r\n                },\r\n                element: (_props: any) => {\r\n                    const useStyle = makeStyles((theme: any) => ({\r\n                        popoverPaper: {\r\n                            width: theme.extrabarPopoverPaper.width\r\n                        },\r\n                        buttonLabel: {\r\n                            color: theme.extrabar.color\r\n                        }\r\n                    }));\r\n                    const classes = useStyle();\r\n\r\n                    const menu = useSelector((state: any) => state.extraMenu.menu);\r\n                    const dispatch = useDispatch();\r\n                    const updateMenu = (id: string, newMenu: any) => {\r\n                        dispatch(extraMenuSlice.actions.updateMenu({ id, menu: newMenu }));\r\n                    };\r\n                    return <PopoverList menu={menu} updateMenu={updateMenu} classes={classes} />;\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    main: {\r\n        children: [\r\n            {\r\n                id: 'main',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (_theme: any) => ({\r\n                        flex: 1,\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        alignItems: 'center'\r\n                    })),\r\n                    defaultContent: 'main'\r\n                },\r\n                element: Panel,\r\n                children: [\r\n                    {\r\n                        element: (_props: any) => 'not found'\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    footer: {\r\n        children: [\r\n            {\r\n                id: 'copyrightText',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        padding: theme.globals.padding,\r\n                        fontSize: theme.copyrightText.fontSize,\r\n                        color: theme.copyrightText.color\r\n                    })),\r\n                    defaultContent: (_props: any) => {\r\n                        const text = useSelector((state: any) => state.copyright.text);\r\n                        return <React.Fragment key={1}>{text}</React.Fragment>;\r\n                    }\r\n                },\r\n                element: Panel\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\nexport default template;\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport { makeStyles, Button, TextField, Grid, CardHeader, Card, CardActions, CardContent } from '@material-ui/core';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Panel from '../../components/Panel';\r\nimport PopoverList from '../../components/PopoverList';\r\n\r\nimport StyledComponent from '../../utils/StyledComponent';\r\nimport extraMenuSlice from '../../slices/extraMenu';\r\n\r\nimport * as classicViews from '../../views/classic';\r\n\r\nconst template = {\r\n    __layout: 'basic',\r\n    root: {},\r\n    logo: {\r\n        children: [\r\n            {\r\n                id: 'logoText',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        marginLeft: theme.globals.padding\r\n                    })),\r\n                    defaultContent: (_props: any) => {\r\n                        const text = useSelector((state: any) => state.logo.text);\r\n                        return <React.Fragment key={1}>{text}</React.Fragment>;\r\n                    }\r\n                },\r\n                element: Panel\r\n            }\r\n        ]\r\n    },\r\n    navbar: {\r\n        children: [classicViews.mNavMenuBar, classicViews.navMenuBar]\r\n    },\r\n    extrabar: {\r\n        children: [\r\n            {\r\n                id: 'extraMenu',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        backgroundColor: theme.extrabar.backgroundColor\r\n                    })),\r\n                    defaultContent: 'extraMenu'\r\n                },\r\n                element: (_props: any) => {\r\n                    const useStyle = makeStyles((theme: any) => ({\r\n                        popoverPaper: {\r\n                            width: theme.extrabarPopoverPaper.width\r\n                        },\r\n                        buttonLabel: {\r\n                            color: theme.extrabar.color\r\n                        }\r\n                    }));\r\n                    const classes = useStyle();\r\n\r\n                    const menu = useSelector((state: any) => state.extraMenu.menu);\r\n                    const dispatch = useDispatch();\r\n                    const updateMenu = (id: string, newMenu: any) => {\r\n                        dispatch(extraMenuSlice.actions.updateMenu({ id, menu: newMenu }));\r\n                    };\r\n                    return <PopoverList menu={menu} updateMenu={updateMenu} classes={classes} />;\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    main: {\r\n        children: [\r\n            {\r\n                id: 'main',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (_theme: any) => ({\r\n                        flex: 1,\r\n                        display: 'flex'\r\n                    })),\r\n                    defaultContent: 'main'\r\n                },\r\n                element: Panel,\r\n                children: [\r\n                    {\r\n                        element: (_props: any) => {\r\n                            const useStyles = makeStyles((theme: any) => ({\r\n                                cardHeaderRoot: {\r\n                                    padding: 0\r\n                                },\r\n                                cardHeaderTitle: {\r\n                                    textAlign: 'center',\r\n                                    padding: `calc(${theme.globals.padding} / 2)`,\r\n                                    backgroundColor: theme.navbar.backgroundColor,\r\n                                    color: theme.navbar.color,\r\n                                    [theme.breakpoints.down('xs')]: {\r\n                                        backgroundColor: theme.workspace.backgroundColor,\r\n                                        color: theme.workspace.color\r\n                                    }\r\n                                },\r\n                                cardHeaderContent: {\r\n                                    height: '100%'\r\n                                },\r\n                                cardActionsRoot: {\r\n                                    display: 'flex',\r\n                                    justifyContent: 'end'\r\n                                },\r\n                                gridContainer: {\r\n                                    justifyContent: 'center',\r\n                                    alignItems: 'center',\r\n                                    [theme.breakpoints.down('xs')]: {\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'start',\r\n                                        marginTop: theme.globals.padding\r\n                                    }\r\n                                },\r\n                                gridItem: {\r\n                                    [theme.breakpoints.down('xs')]: {\r\n                                        flexGrow: 1,\r\n                                        maxWidth: '100%',\r\n                                        flexBasis: '100%'\r\n                                    }\r\n                                },\r\n                                cardRoot: {\r\n                                    [theme.breakpoints.down('xs')]: {\r\n                                        boxShadow: 'none'\r\n                                    }\r\n                                }\r\n                            }));\r\n                            const classes = useStyles();\r\n                            return (\r\n                                <Grid container classes={{ container: classes.gridContainer }}>\r\n                                    <Grid item xs={12} sm={8} md={6} lg={4} classes={{ item: classes.gridItem }}>\r\n                                        <Card classes={{ root: classes.cardRoot }}>\r\n                                            <CardHeader\r\n                                                title='Login'\r\n                                                classes={{\r\n                                                    root: classes.cardHeaderRoot,\r\n                                                    title: classes.cardHeaderTitle,\r\n                                                    content: classes.cardHeaderContent\r\n                                                }}\r\n                                            />\r\n                                            <CardContent>\r\n                                                <TextField\r\n                                                    id='standard-full-width'\r\n                                                    label=''\r\n                                                    placeholder='Username'\r\n                                                    helperText=''\r\n                                                    fullWidth\r\n                                                    margin='normal'\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true\r\n                                                    }}\r\n                                                />\r\n                                                <TextField\r\n                                                    id='standard-full-width'\r\n                                                    label=''\r\n                                                    placeholder='Password'\r\n                                                    helperText=''\r\n                                                    fullWidth\r\n                                                    margin='normal'\r\n                                                    InputLabelProps={{\r\n                                                        shrink: true\r\n                                                    }}\r\n                                                    InputProps={{\r\n                                                        type: 'password'\r\n                                                    }}\r\n                                                />\r\n                                            </CardContent>\r\n                                            <CardActions classes={{ root: classes.cardActionsRoot }}>\r\n                                                <Button variant='contained' color='primary'>\r\n                                                    Submit\r\n                                                </Button>\r\n                                            </CardActions>\r\n                                        </Card>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            );\r\n                        }\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    footer: {\r\n        children: [\r\n            {\r\n                id: 'copyrightText',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        padding: theme.globals.padding,\r\n                        fontSize: theme.copyrightText.fontSize,\r\n                        color: theme.copyrightText.color\r\n                    })),\r\n                    defaultContent: (_props: any) => {\r\n                        const text = useSelector((state: any) => state.copyright.text);\r\n                        return <React.Fragment key={1}>{text}</React.Fragment>;\r\n                    }\r\n                },\r\n                element: Panel\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\nexport default template;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport _ from 'lodash';\r\nimport updateMenu from '../utils/updateMenu';\r\n\r\nconst defaultMenu = {\r\n    id: 'root',\r\n    label: 'root',\r\n    open: false,\r\n    children: []\r\n};\r\n\r\nexport interface SideMenuState {\r\n    menu: any;\r\n}\r\n\r\nconst initialState: SideMenuState = {\r\n    menu: defaultMenu\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'sideMenu',\r\n    initialState,\r\n    reducers: {\r\n        updateMenu: (state, action: PayloadAction<any>) => {\r\n            const { id, menu } = action.payload;\r\n            updateMenu(state, 'menu', id, menu);\r\n        }\r\n    }\r\n});\r\n\r\nexport default slice;\r\n","import React, { useEffect } from 'react';\r\nimport _ from 'lodash';\r\nimport { makeStyles } from '@material-ui/core';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport Panel from '../../components/Panel';\r\nimport NestedList from '../../components/NestedList';\r\nimport PopoverList from '../../components/PopoverList';\r\n\r\nimport StyledComponent from '../../utils/StyledComponent';\r\nimport sideMenuSlice from '../../slices/sideMenu';\r\nimport navMenuSlice from '../../slices/navMenu';\r\nimport extraMenuSlice from '../../slices/extraMenu';\r\n\r\nimport * as classicViews from '../../views/classic';\r\n\r\nconst template = {\r\n    __layout: 'common',\r\n    root: {\r\n        element(props: any) {\r\n            const dispatch = useDispatch();\r\n\r\n            useEffect(() => {\r\n                const sideMenu = {\r\n                    id: 'root',\r\n                    label: 'root',\r\n                    open: false,\r\n                    children: [\r\n                        {\r\n                            id: 'popover-aa',\r\n                            label: 'aa',\r\n                            open: false,\r\n                            children: [\r\n                                {\r\n                                    id: 'popover-aa-1',\r\n                                    label: 'aa-1',\r\n                                    open: false,\r\n                                    children: [\r\n                                        {\r\n                                            id: 'popover-aa-1-1',\r\n                                            label: 'aa-1-1',\r\n                                            onClick(menu: any) {\r\n                                                return menu;\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            id: 'popover-bb',\r\n                            label: 'bb',\r\n                            onClick(menu: any) {\r\n                                return menu;\r\n                            }\r\n                        }\r\n                    ]\r\n                };\r\n                dispatch(sideMenuSlice.actions.updateMenu({ id: 'root', menu: sideMenu }));\r\n\r\n                const navMenu = {\r\n                    id: 'root',\r\n                    label: 'root',\r\n                    open: false,\r\n                    children: [\r\n                        {\r\n                            id: 'popover-cc',\r\n                            label: 'cc',\r\n                            open: false,\r\n                            children: [\r\n                                {\r\n                                    id: 'popover-cc-1',\r\n                                    label: 'cc-1',\r\n                                    open: false,\r\n                                    children: [\r\n                                        {\r\n                                            id: 'popover-cc-1-1',\r\n                                            label: 'cc-1-1',\r\n                                            onClick(menu: any) {\r\n                                                return menu;\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            label: 'dd',\r\n                            id: 'popover-dd',\r\n                            onClick(menu: any) {\r\n                                return menu;\r\n                            }\r\n                        }\r\n                    ]\r\n                };\r\n                dispatch(navMenuSlice.actions.updateMenu({ id: 'root', menu: navMenu }));\r\n                dispatch(\r\n                    navMenuSlice.actions.updateMobileMenu({\r\n                        id: 'root',\r\n                        menu: { ...navMenu, label: '', icon: 'more_horiz' }\r\n                    })\r\n                );\r\n\r\n                const extraMenu = {\r\n                    id: 'root',\r\n                    label: '',\r\n                    icon: 'settings',\r\n                    open: false,\r\n                    children: [\r\n                        {\r\n                            label: 'ee',\r\n                            open: false,\r\n                            id: 'popover-ee',\r\n                            children: [\r\n                                {\r\n                                    label: 'ee-1',\r\n                                    open: false,\r\n                                    id: 'popover-ee-1',\r\n                                    children: [\r\n                                        {\r\n                                            label: 'ee-1-1',\r\n                                            id: 'popover-ee-1-1',\r\n                                            onClick(menu: any) {\r\n                                                return menu;\r\n                                            }\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            ]\r\n                        },\r\n                        {\r\n                            label: 'ff',\r\n                            id: 'popover-ff',\r\n                            onClick(menu: any) {\r\n                                return menu;\r\n                            }\r\n                        }\r\n                    ]\r\n                };\r\n                dispatch(extraMenuSlice.actions.updateMenu({ id: 'root', menu: extraMenu }));\r\n            });\r\n\r\n            return <Panel {...props} />;\r\n        }\r\n    },\r\n    logo: {\r\n        children: [\r\n            {\r\n                id: 'logoText',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        marginLeft: theme.globals.padding\r\n                    })),\r\n                    defaultContent: (_props: any) => {\r\n                        const text = useSelector((state: any) => state.logo.text);\r\n                        return <React.Fragment key={1}>{text}</React.Fragment>;\r\n                    }\r\n                },\r\n                element: Panel\r\n            }\r\n        ]\r\n    },\r\n    navbar: {\r\n        children: [classicViews.mNavMenuBar, classicViews.navMenuBar]\r\n    },\r\n    sidebar: {\r\n        children: [\r\n            {\r\n                element: (_props: any) => {\r\n                    const menu = useSelector((state: any) => state.sideMenu.menu);\r\n                    const dispatch = useDispatch();\r\n                    const updateMenu = (id: string, newMenu: any) => {\r\n                        dispatch(sideMenuSlice.actions.updateMenu({ id, menu: newMenu }));\r\n                    };\r\n                    return <NestedList menu={menu} updateMenu={updateMenu} />;\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    extrabar: {\r\n        children: [\r\n            {\r\n                id: 'extraMenu',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        backgroundColor: theme.extrabar.backgroundColor\r\n                    })),\r\n                    defaultContent: 'extraMenu'\r\n                },\r\n                element: (_props: any) => {\r\n                    const useStyle = makeStyles((theme: any) => ({\r\n                        popoverPaper: {\r\n                            width: theme.extrabarPopoverPaper.width\r\n                        },\r\n                        buttonLabel: {\r\n                            color: theme.extrabar.color\r\n                        }\r\n                    }));\r\n                    const classes = useStyle();\r\n\r\n                    const menu = useSelector((state: any) => state.extraMenu.menu);\r\n                    const dispatch = useDispatch();\r\n                    const updateMenu = (id: string, newMenu: any) => {\r\n                        dispatch(extraMenuSlice.actions.updateMenu({ id, menu: newMenu }));\r\n                    };\r\n                    return <PopoverList menu={menu} updateMenu={updateMenu} classes={classes} />;\r\n                }\r\n            }\r\n        ]\r\n    },\r\n    main: {\r\n        children: [\r\n            {\r\n                id: 'main',\r\n                props: {\r\n                    defaultContent: 'main'\r\n                },\r\n                element: Panel\r\n            }\r\n        ]\r\n    },\r\n    footer: {\r\n        children: [\r\n            {\r\n                id: 'copyrightText',\r\n                props: {\r\n                    styledElement: StyledComponent('div', (theme: any) => ({\r\n                        padding: theme.globals.padding,\r\n                        fontSize: theme.copyrightText.fontSize,\r\n                        color: theme.copyrightText.color\r\n                    })),\r\n                    defaultContent: (_props: any) => {\r\n                        const text = useSelector((state: any) => state.copyright.text);\r\n                        return <React.Fragment key={1}>{text}</React.Fragment>;\r\n                    }\r\n                },\r\n                element: Panel\r\n            }\r\n        ]\r\n    }\r\n};\r\n\r\nexport default template;\r\n","import _ from 'lodash';\r\n\r\nimport { createTheme } from '@material-ui/core';\r\nimport chroma from 'chroma-js';\r\n\r\nconst globals = {\r\n    padding: '0.5rem',\r\n    fontFamily: '\"Helvetica Neue\", Helvetica, Roboto, Arial, sans-serif',\r\n    primaryBackgroundColor: '#2d4a77',\r\n    secondaryBackgroundColor: chroma('#2d4a77').brighten(0.4).hex()\r\n};\r\n\r\nconst theme = _.merge(\r\n    createTheme({\r\n        typography: {\r\n            button: {\r\n                textTransform: 'none'\r\n            }\r\n        },\r\n        palette: {\r\n            primary: {\r\n                main: 'rgb(33, 111, 193)'\r\n            }\r\n        }\r\n    }),\r\n    {\r\n        header: {\r\n            height: '3rem',\r\n            backgroundColor: globals.primaryBackgroundColor,\r\n            color: '#fff'\r\n        },\r\n        logobar: {\r\n            fontSize: '1.2rem',\r\n            width: '12rem'\r\n        },\r\n        navbar: {\r\n            backgroundColor: globals.secondaryBackgroundColor,\r\n            color: '#fff'\r\n        },\r\n        navbarPopoverPaper: {\r\n            width: '12rem'\r\n        },\r\n        navMenu: {},\r\n        sidebar: {\r\n            width: '12rem',\r\n            backgroundColor: globals.secondaryBackgroundColor,\r\n            color: '#fff'\r\n        },\r\n        extrabar: {\r\n            backgroundColor: globals.secondaryBackgroundColor,\r\n            color: '#fff'\r\n        },\r\n        extrabarMenu: {},\r\n        extrabarPopoverPaper: {\r\n            width: '12rem'\r\n        },\r\n        workspace: {\r\n            backgroundColor: '#fff',\r\n            color: '#000'\r\n        },\r\n        footer: {\r\n            backgroundColor: '#ececec',\r\n            color: 'rgb(40, 40, 40)',\r\n            fontSize: '0.8rem'\r\n        },\r\n        copyrightText: {\r\n            fontSize: '0.8rem',\r\n            color: 'rgb(68, 67, 67)'\r\n        },\r\n        globals\r\n    }\r\n);\r\n\r\nexport default theme;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst fullYear = new Date().getFullYear();\r\n\r\nexport interface CopyrightState {\r\n    text: string;\r\n}\r\n\r\nconst initialState: CopyrightState = {\r\n    text: `All Rights Reserved By RJFW @${fullYear}`\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'copyright',\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport default slice;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport interface LogoState {\r\n    text: string;\r\n}\r\n\r\nconst initialState: LogoState = {\r\n    text: 'SMCMS'\r\n};\r\n\r\nconst slice = createSlice({\r\n    name: 'logo',\r\n    initialState,\r\n    reducers: {}\r\n});\r\n\r\nexport default slice;\r\n","import React from 'react';\nimport _ from 'lodash';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport { createTheme, ThemeProvider } from '@material-ui/core';\n\nimport ElementNode, { ElementNodeTypes } from '../DS/ElementNode';\nimport * as EngineTypes from './types';\n\nclass Engine {\n    pages: EngineTypes.PageOptions[];\n    templates: { [key: string]: ElementNodeTypes.LoadOptions };\n    layouts: { [key: string]: ElementNodeTypes.LoadOptions };\n    views: { [key: string]: ElementNodeTypes.LoadOptions };\n    themes: { [key: string]: EngineTypes.Theme };\n\n    constructor() {\n        this.pages = [];\n        this.templates = {};\n        this.layouts = {};\n        this.views = {};\n        this.themes = {};\n    }\n\n    addView(name: string, options: ElementNodeTypes.LoadOptions, map?: EngineTypes.ReplaceOptions) {\n        const view = _.cloneDeep(options);\n        ElementNode.replace(view, map);\n        this.views[name] = view;\n        return view;\n    }\n\n    addLayout(name: string, options: ElementNodeTypes.LoadOptions, map?: EngineTypes.ReplaceOptions) {\n        const layout = _.cloneDeep(options);\n        ElementNode.replace(layout, map);\n        this.layouts[name] = layout;\n        return layout;\n    }\n\n    addTemplate(name: string, layoutName: string, map?: EngineTypes.ReplaceOptions) {\n        const template = _.cloneDeep(this.layouts[layoutName]);\n        ElementNode.replace(template, map);\n        this.templates[name] = template;\n        return template;\n    }\n\n    addTheme(name: string, options: EngineTypes.Theme) {\n        const theme = _.cloneDeep(options);\n        this.themes[name] = theme;\n        return theme;\n    }\n\n    addPage(\n        options: EngineTypes.BasicPageOptions,\n        templateName: string,\n        themeName: string,\n        map?: EngineTypes.ReplaceOptions\n    ) {\n        if (typeof this.templates[templateName] === 'undefined') {\n            throw new Error(`this templateId (${templateName}) doesn't exists.`);\n        }\n\n        const template = _.cloneDeep(this.templates[templateName]);\n        ElementNode.replace(template, map);\n\n        const page = {\n            title: options.title,\n            path: options.path,\n            page: template,\n            themeName\n        };\n        this.pages.push(page);\n        return page;\n    }\n\n    createPages(pages: EngineTypes.PageOptions[]) {\n        const children: any[] = [];\n        _.forEach(pages, (page: EngineTypes.PageOptions, i: number) => {\n            const El = (props: any) => {\n                const node = new ElementNode();\n                node.load(page.page);\n                return node.toComponent(props);\n            };\n\n            children.push(<Route key={i} path={page.path} element={<El />} />);\n        });\n\n        return <Routes>{children}</Routes>;\n    }\n\n    createRouter(themeName: string, themes: any) {\n        return <Router>{this.createPages(themes[themeName])}</Router>;\n    }\n\n    createApp() {\n        const themes: { [key: string]: any } = {};\n        _.forEach(this.pages, (page: EngineTypes.PageOptions, _i: number) => {\n            if (typeof themes[page.themeName] === 'undefined') {\n                themes[page.themeName] = [];\n            }\n            themes[page.themeName].push(page);\n        });\n\n        _.forEach(themes, (pages: EngineTypes.PageOptions[], _i: string) => {\n            pages.sort((a: EngineTypes.PageOptions, b: EngineTypes.PageOptions) => a.path.localeCompare(b.path));\n        });\n\n        const themeNames = _.keys(themes);\n        const pages = themeNames.map((themeName: string, _i: number) => (\n            <ThemeProvider key={themeName} theme={createTheme(this.themes[themeName])}>\n                {this.createRouter(themeName, themes)}\n            </ThemeProvider>\n        ));\n\n        return <React.Fragment key={1}>{pages}</React.Fragment>;\n    }\n\n    start(options: EngineTypes.StartOptions) {\n        const { store } = options;\n\n        ReactDOM.render(<Provider store={store}>{this.createApp()}</Provider>, document.getElementById('app'));\n    }\n}\n\nexport * as EngineTypes from './types';\nexport default Engine;\n","import React from 'react';\nimport StyledComponent from './StyledComponent';\n\nfunction HtmlTag(tagName: string, makeStyles: any, options: any = {}) {\n    const El = StyledComponent(tagName, makeStyles, options);\n\n    return (props: any) => <El {...props.attrs}>{props.children}</El>;\n}\n\nexport default HtmlTag;\n","import _ from 'lodash';\r\n\r\nfunction createReducer(slice: any) {\r\n    const reducer: any = {};\r\n    _.forEach(slice, (v: any, i: any) => {\r\n        reducer[i] = v.reducer;\r\n    });\r\n    return reducer;\r\n}\r\n\r\nexport default createReducer;\r\n","import _ from 'lodash';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nfunction createStore(rootReducer: any, middleware: any[] = []) {\r\n    return configureStore({\r\n        reducer: rootReducer,\r\n        middleware,\r\n        devTools: process.env.NODE_ENV === 'development'\r\n    });\r\n}\r\n\r\nexport default createStore;\r\n"],"names":["MaterialUI","RTK","ReactRedux","React","ReactRouterDOM"],"mappings":"qRAIA,myBCFA,oHCAA,0GCCA,yGCDA,4BACWA,oBAAAA,wCCOX,yJCLA,QAAkBA,kEAclB,0KAUaA,qEACIA,0FACsCA,wDAA2BA,kFAGjEA,+EACIA,mKCvBrB,qOAmBSA,uLClBT,8KAwBaA,+KAEkBA,iGAGFA,wDAA2BA,kFAGvCA,0TCzCjB,0GAkBcC,kiBCWmBD,2HAUJE,oDACIA,kdAgCAF,2HAUJE,8CACIA,uTC/EjC,+oBA2C+DF,0LAWlBE,2EAC0CF,ooCCrDzEC,4uBC0C8CD,8FAK6BA,kBACxCE,oDAOZF,qJAS0BA,0LAWlBE,2EAC0CF,w7BAwElDE,osBC1JrC,0EAgBcD,iRCIuBC,2SAsBAF,+HAUJE,gDACIA,qhBA0CAA,6QCzEAA,2SAsBAF,+HAUJE,gDACIA,iSAwBSF,8sBA6CbA,uFACIA,6FACIA,gEACIA,+IAQAA,gDACIA,4KAWAA,0MAeJA,8EACIA,4QAyBZE,2KC7KvBD,4KCEeC,gCAEjBC,qnCAoIyBD,6KAeJA,+CACIA,qSAoBAF,+HAUJE,gDACIA,+YA+BAA,kOCpOrC,wMAQIF,oxBCXJ,4EAUcC,iECFAA,iOCCd,4wBA0E2BG,gKAGXA,2EAIAA,8SAkBHJ,sCAAqCA,qLAWzBE,4GCtHzB,iJCDA,sFCCA,wBACWD"}